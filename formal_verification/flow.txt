
{
    configuration = Configuration()
    self = Schedule(configuration)
}
    calculateFitness(self)
{
    (
        self._fitness = 1 and for all cc, reservation_index in self._classes.items(), r= Criteria.isSeatEnough(r, cc)
        and Criteria.isComputerEnough(r, cc)
        and not Criteria.isRoomOverlapped(slots, reservation, dur)
        and not Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[0]
        and not Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[1]
    )
    or 
    (
        self._fitness < 1
    )
}

[SEQUENTIAL RULE]

{
    configuration = Configuration()
    and
    self = Schedule(configuration)
}
    self._objectives := np.zeros(len(Criteria.weights))
    score := 0
    criteria, configuration := self._criteria, self._configuration
    items, slots := self._classes.items(), self._slots
    numberOfRooms := configuration.numberOfRooms
    DAY_HOURS, DAYS_NUM := Constant.DAY_HOURS, Constant.DAYS_NUM
    daySize := DAY_HOURS * numberOfRooms
    ci := 0
    getRoomById := configuration.getRoomById
    m := 0
{
    W
}

{
    W
}
    WHILE
        m < len(items)
    DO
        cc := items[m][0]
        reservation_index := items[m][1]
        reservation := Reservation.parse(reservation_index)
        day, time, room := reservation.Day, reservation.Time, reservation.Room
        dur := cc.Duration
        ro := Criteria.isRoomOverlapped(slots, reservation, dur)
        criteria[ci + 0] := !ro
        r := getRoomById(room)
        criteria[ci + 1] := Criteria.isSeatEnough(r, cc)
        criteria[ci + 2] := Criteria.isComputerEnough(r, cc)
        timeId := day * daySize + time
        po := Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[0]
        go := Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[1]
        criteria[ci + 3] := ! po
        criteria[ci + 4] := ! go

        i := 0
        WHILE
            i < len(self._objectives)
        DO 
            IF 
                criteria[ci + i] = true 
            THEN 
                score := score + 1 
                i := i + 1
            ELSE 
                score := score + Criteria.weights[i];
                IF 
                    Criteria.weights[i] > 0 
                THEN 
                    self._objectives[i] := self._objectives[i] + 1
                    i := i + 1
                ELSE
                    self._objectives[i] := self._objectives[i] + 2
                    i := i + 1
                END IF
            END IF
        END WHILE

        ci := ci + len(Criteria.weights)
        m := m + 1

    END WHILE

    self._fitness := score / len(criteria)

{
    (
        self._fitness = 1 and for all cc, reservation_index in self._classes.items(), r= Criteria.isSeatEnough(r, cc)
        and Criteria.isComputerEnough(r, cc)
        and not Criteria.isRoomOverlapped(slots, reservation, dur)
        and not Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[0]
        and not Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[1]
    )
    or 
    (
        self._fitness < 1
    )
}

[SEQUENTIAL RULE]

{
    W
}
WHILE 
    m < len(items)
DO
    cc := items[m][0]
    reservation_index := items[m][1]
    reservation := Reservation.parse(reservation_index)
    day, time, room := reservation.Day, reservation.Time, reservation.Room
    dur := cc.Duration
    ro := Criteria.isRoomOverlapped(slots, reservation, dur)
    criteria[ci + 0] := !ro
    r := getRoomById(room)
    criteria[ci + 1] := Criteria.isSeatEnough(r, cc)
    criteria[ci + 2] := Criteria.isComputerEnough(r, cc)
    timeId := day * daySize + time
    po := Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[0]
    go := Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[1]
    criteria[ci + 3] := ! po
    criteria[ci + 4] := ! go

    i := 0
    WHILE
        i < len(self._objectives)
    DO 
        IF 
            criteria[ci + i] = true 
        THEN 
            score := score + 1
            i := i + 1
        ELSE 
            score := score + Criteria.weights[i]; 
            IF 
                Criteria.weights[i] > 0 
            THEN 
                self._objectives[i] := self._objectives[i] + 1
                i := i + 1
            ELSE
                self._objectives[i] := self._objectives[i] + 2
                i := i + 1
            END IF
        END IF
    END WHILE

    ci := ci + len(Criteria.weights)
    m = m + 1
END WHILE
{
    P
}

{
    P
}
self._fitness := score / len(criteria)

{
    (
        self._fitness = 1 and for all cc, reservation_index in self._classes.items(), r= Criteria.isSeatEnough(r, cc)
        and Criteria.isComputerEnough(r, cc)
        and not Criteria.isRoomOverlapped(slots, reservation, dur)
        and not Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[0]
        and not Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[1]
    )
    or 
    (
        self._fitness < 1
    )
}

[ASSIGNMENT RULE]

{
    (score = len(criteria) and for all cc, reservation_index in self._classes.items(), r= Criteria.isSeatEnough(r, cc)
    and Criteria.isComputerEnough(r, cc)
    and not Criteria.isRoomOverlapped(slots, reservation, dur)
    and not Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[0]
    and not Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[1])
    or 
    (
        score < len(criteria)
    )

}
self._fitness := score / len(criteria)

{
    (self._fitness = 1 and for all cc, reservation_index in self._classes.items(), r= Criteria.isSeatEnough(r, cc)
    and Criteria.isComputerEnough(r, cc)
    and not Criteria.isRoomOverlapped(slots, reservation, dur)
    and not Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[0]
    and not Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[1])
    or 
    (
        self._fitness < 1
    )
}

P = 
(
    (
        score = len(criteria) and for all cc, reservation_index in self._classes.items(), r= Criteria.isSeatEnough(r, cc)
        and Criteria.isComputerEnough(r, cc)
        and not Criteria.isRoomOverlapped(slots, reservation, dur)
        and not Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[0]
        and not Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[1]
    )
        or 
    (
        score < len(criteria)
    )
)

-------------------------------------------------------
Applying P:

{
    W
}
WHILE 
    m < len(items)
DO
    cc := items[m][0]
    reservation_index := items[m][1]
    reservation := Reservation.parse(reservation_index)
    day, time, room := reservation.Day, reservation.Time, reservation.Room
    dur := cc.Duration
    ro := Criteria.isRoomOverlapped(slots, reservation, dur)
    criteria[ci + 0] := !ro
    r := getRoomById(room)
    criteria[ci + 1] := Criteria.isSeatEnough(r, cc)
    criteria[ci + 2] := Criteria.isComputerEnough(r, cc)
    timeId := day * daySize + time
    po := Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[0]
    go := Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[1]
    criteria[ci + 3] := ! po
    criteria[ci + 4] := ! go

    i := 0
    WHILE
        i < len(self._objectives)
    DO 
        IF 
            criteria[ci + i] = true 
        THEN 
            score := score + 1
            i := i + 1
        ELSE 
            score := score + Criteria.weights[i]; 
            IF 
                Criteria.weights[i] > 0 
            THEN 
                self._objectives[i] := self._objectives[i] + 1
                i := i + 1
            ELSE
                self._objectives[i] := self._objectives[i] + 2
                i := i + 1
            END IF
        END IF
    END WHILE

    ci := ci + len(Criteria.weights)
    m = m + 1
END WHILE
{
    (
        score = len(criteria) and for all cc, reservation_index in self._classes.items(), r= Criteria.isSeatEnough(r, cc)
        and Criteria.isComputerEnough(r, cc)
        and not Criteria.isRoomOverlapped(slots, reservation, dur)
        and not Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[0]
        and not Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[1]
    )
        or 
    (
        score < len(criteria)
    )
}

[ITERATION RULE]

A -> W
--

(
    score = len(criteria) and for all cc, reservation_index in self._classes.items(), r= Criteria.isSeatEnough(r, cc)
    and Criteria.isComputerEnough(r, cc)
    and not Criteria.isRoomOverlapped(slots, reservation, dur)
    and not Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[0]
    and not Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[1]
)
    or 
(
    score < len(criteria)
) ->
A and m >= len(items)
--

{
    A and m < len(items)
}
    cc := items[m][0]
    reservation_index := items[m][1]
    reservation := Reservation.parse(reservation_index)
    day, time, room := reservation.Day, reservation.Time, reservation.Room
    dur := cc.Duration
    ro := Criteria.isRoomOverlapped(slots, reservation, dur)
    criteria[ci + 0] := !ro
    r := getRoomById(room)
    criteria[ci + 1] := Criteria.isSeatEnough(r, cc)
    criteria[ci + 2] := Criteria.isComputerEnough(r, cc)
    timeId := day * daySize + time
    po := Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[0]
    go := Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[1]
    criteria[ci + 3] := ! po
    criteria[ci + 4] := ! go

    i := 0
    WHILE
        i < len(self._objectives)
    DO 
        IF 
            criteria[ci + i] = true 
        THEN 
            score := score + 1
            i := i + 1
        ELSE 
            score := score + Criteria.weights[i]; 
            IF 
                Criteria.weights[i] > 0 
            THEN 
                self._objectives[i] := self._objectives[i] + 1
                i := i + 1
            ELSE
                self._objectives[i] := self._objectives[i] + 2
                i := i + 1
            END IF
        END IF
    END WHILE

    ci := ci + len(Criteria.weights)
    m = m + 1
{
    A and m >= len(items)
}

[SEQUENCE RULE]

{
    A and m < len(items)
}
    cc := items[m][0]
    reservation_index := items[m][1]
    reservation := Reservation.parse(reservation_index)
    day, time, room := reservation.Day, reservation.Time, reservation.Room
    dur := cc.Duration
    ro := Criteria.isRoomOverlapped(slots, reservation, dur)
    criteria[ci + 0] := !ro
    r := getRoomById(room)
    criteria[ci + 1] := Criteria.isSeatEnough(r, cc)
    criteria[ci + 2] := Criteria.isComputerEnough(r, cc)
    timeId := day * daySize + time
    po := Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[0]
    go := Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[1]
    criteria[ci + 3] := ! po
    criteria[ci + 4] := ! go
    i := 0
{
    B
}
--
{
    B
}
    WHILE
        i < len(self._objectives)
    DO 
        IF 
            criteria[ci + i] = true 
        THEN 
            score := score + 1
            i := i + 1
        ELSE 
            score := score + Criteria.weights[i]; 
            IF 
                Criteria.weights[i] > 0 
            THEN 
                self._objectives[i] := self._objectives[i] + 1
                i := i + 1
            ELSE
                self._objectives[i] := self._objectives[i] + 2
                i := i + 1
            END IF
        END IF
    END WHILE
{
    C
}
----

{
    C
}
    ci := ci + len(Criteria.weights)
    m = m + 1
{
    A and m >= len(items)
}

[ITERATION RULE]

(
    B
) -> D
--

D and i >= len(self._objectives)
-> C
--

{
    D and i < len(self._objectives)
}
    IF 
        criteria[ci + i] = true 
    THEN 
        score := score + 1
        i := i + 1
    ELSE 
        score := score + Criteria.weights[i]; 
        IF 
            Criteria.weights[i] > 0 
        THEN 
            self._objectives[i] := self._objectives[i] + 1
            i := i + 1
        ELSE
            self._objectives[i] := self._objectives[i] + 2
            i := i + 1
        END IF
    END IF
{
    D
}

----------------------------------------------

[CONDITIONAL RULE]

{
    D and i < len(self._objectives) and criteria[ci + i] = true 
}
    score := score + 1
    i := i + 1
{
    D
}
--
{
    D and i < len(self._objectives) and criteria[ci + i] = false 
} 
    IF 
        Criteria.weights[i] > 0 
    THEN
        score := score + Criteria.weights[i]; 
        self._objectives[i] := self._objectives[i] + 1
        i := i + 1
    ELSE
        score := score + Criteria.weights[i];
        self._objectives[i] := self._objectives[i] + 2
        i := i + 1
    END IF
{
    D
}

-----------------------------------------------
[CONDITIONAL RULE]

{
    D and i < len(self._objectives) and criteria[ci + i] = false and Criteria.weights[i] > 0 
}
    score := score + Criteria.weights[i];
    self._objectives[i] := self._objectives[i] + 1
    i := i + 1
{
    D
}
--

{
    D and i < len(self._objectives) and criteria[ci + i] = false and Criteria.weights[i] <= 0 
}
    score := score + Criteria.weights[i];
    self._objectives[i] := self._objectives[i] + 2
    i := i + 1
{
    D
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------
Now, we need to find D using this Hoare Triples, which should be valid:

{
    D and i < len(self._objectives) and criteria[ci + i] = false and Criteria.weights[i] > 0 
}
    score := score + Criteria.weights[i];
    self._objectives[i] := self._objectives[i] + 1
    i := i + 1
{
    D
}
--

{
    D and i < len(self._objectives) and criteria[ci + i] = false and Criteria.weights[i] <= 0 
}
    score := score + Criteria.weights[i];
    self._objectives[i] := self._objectives[i] + 2
    i := i + 1
{
    D
}
--

{
    D and i < len(self._objectives) and criteria[ci + i] = true 
}
    score := score + 1
    i := i + 1
{
    D
}

-------------------------------------------
D = 
(
    score = sum(
        1 if criteria[ci + j] = True else Criteria.weights[j]
        for j in range(len(self._objectives))
    )
    and
    0 <= i <= len(self._objectives)
    and
    self._objectives[j] = sum(
       1 if criteria[ci + j] = False and Criteria.weights[j] > 0 else
       2 if criteria[ci + j] = False and Criteria.weights[j] <= 0
       for j in range(len(self._objectives))
    )
)
meaning D stores the state of the score, which increases for all violations of criteria, and self._objectives also stores violations but per criteria

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Now, lets find W:

{
    configuration = Configuration()
    and
    self = Schedule(configuration)
}
    self._objectives := np.zeros(len(Criteria.weights))
    score := 0
    criteria, configuration := self._criteria, self._configuration
    items, slots := self._classes.items(), self._slots
    numberOfRooms := configuration.numberOfRooms
    DAY_HOURS, DAYS_NUM := Constant.DAY_HOURS, Constant.DAYS_NUM
    daySize := DAY_HOURS * numberOfRooms
    ci := 0
    getRoomById := configuration.getRoomById
    m := 0
{
    W
}

W =
(
    self._objectives = np.zeros(len(Criteria.weights)) and
    score = 0 and
    criteria, configuration = self._criteria, self._configuration and
    items, slots = self._classes.items(), self._slots and
    numberOfRooms = configuration.numberOfRooms and
    DAY_HOURS, DAYS_NUM = Constant.DAY_HOURS, Constant.DAYS_NUM and
    daySize = DAY_HOURS * numberOfRooms and
    ci = 0 and
    getRoomById = configuration.getRoomById and
    m = 0
)

-----------------------------------------------------------------------------------------------------------------------------------------------------
Now, lets find B, we have:

(
    B
) -> 
(
    score = sum(
        1 if criteria[ci + j] = True else Criteria.weights[j]
        for j in range(len(self._objectives))
    )
    and
    0 <= i <= len(self._objectives)
    and
    self._objectives[j] = sum(
       1 if criteria[ci + j] = False and Criteria.weights[j] > 0 else
       2 if criteria[ci + j] = False and Criteria.weights[j] <= 0 else 0
       for j in range(len(self._objectives))
    )
)

B = 
(
    score = sum(
        1 if criteria[ci + j] = True else Criteria.weights[j]
        for j in range(len(self._objectives))
    )
    and
    0 <= i <= len(self._objectives)
    and
    self._objectives[j] = sum(
       1 if criteria[ci + j] = False and Criteria.weights[j] > 0 else
       2 if criteria[ci + j] = False and Criteria.weights[j] <= 0 else 0
       for j in range(len(self._objectives))
    )
)

--------------------------------------------------------------------------------------------------------------------------------------------
Now, we need to find A such that these Hoare Triples are valid:

A -> 
(
    self._objectives = np.zeros(len(Criteria.weights)) and
    score = 0 and
    criteria, configuration = self._criteria, self._configuration and
    items, slots = self._classes.items(), self._slots and
    numberOfRooms = configuration.numberOfRooms and
    DAY_HOURS, DAYS_NUM = Constant.DAY_HOURS, Constant.DAYS_NUM and
    daySize = DAY_HOURS * numberOfRooms and
    ci = 0 and
    getRoomById = configuration.getRoomById and
    m = 0
)
[3]
--------

(
    score = len(criteria) and for all cc, reservation_index in self._classes.items(), r= Criteria.isSeatEnough(r, cc)
    and Criteria.isComputerEnough(r, cc)
    and not Criteria.isRoomOverlapped(slots, reservation, dur)
    and not Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[0]
    and not Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[1]
)
or (score < len(criteria)) ->
A and m >= len(items)
[4]
-------

{
    A and m < len(items)
}
    cc := items[m][0]
    reservation_index := items[m][1]
    reservation := Reservation.parse(reservation_index)
    day, time, room := reservation.Day, reservation.Time, reservation.Room
    dur := cc.Duration
    ro := Criteria.isRoomOverlapped(slots, reservation, dur)
    criteria[ci + 0] := !ro
    r := getRoomById(room)
    criteria[ci + 1] := Criteria.isSeatEnough(r, cc)
    criteria[ci + 2] := Criteria.isComputerEnough(r, cc)
    timeId := day * daySize + time
    po := Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[0]
    go := Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[1]
    criteria[ci + 3] := ! po
    criteria[ci + 4] := ! go
    i := 0
{
    score = sum(
        1 if criteria[ci + j] = True else Criteria.weights[j]
        for j in range(len(self._objectives))
    )
    and
    0 <= i <= len(self._objectives)
    and
    self._objectives[j] = sum(
       1 if criteria[ci + j] = False and Criteria.weights[j] > 0 else
       2 if criteria[ci + j] = False and Criteria.weights[j] <= 0 else 0
       for j in range(len(self._objectives))
    )
}
[5]
-----------------------------------------------

A = 
(
    criteria, configuration = self._criteria, self._configuration
    and
    items, slots = self._classes.items(), self._slots
    and
    numberOfRooms = configuration.numberOfRooms
    and
    DAY_HOURS, DAYS_NUM = Constant.DAY_HOURS, Constant.DAYS_NUM
    and
    daySize = DAY_HOURS * numberOfRooms
    and
    ci = 0
    and
    getRoomById = configuration.getRoomById
    and
    m = 0
    and
    score = sum(
        1 if criteria[ci + j] = True else Criteria.weights[j]
        for j in range(len(self._objectives))
    ) if len(self._objectives) > 0 else 0
    and
    self._objectives[j] = sum(
       1 if criteria[ci + j] = False and Criteria.weights[j] > 0 else
       2 if criteria[ci + j] = False and Criteria.weights[j] <= 0
       for j in range(len(self._objectives)) if len(self._objectives) > 0 else np.zeros(len(Criteria.weights))
    )
)

We have Criteria.weights = [0, 0.5, 0.5, 0, 0] from Criteria.py.
self._objectives = [] from Schedule.py __init__

Outright, it satisfies [3], since self._objectives = []  -> len(self._objectives) = 0 -> self._objectives = np.zeros(len(Criteria.weights)) and score = 0

[5] is also satisfied, since ci = 0 and we modify criteria[ci+i] for i in range(len(self._objectives)) therefore score and self._objectives will be changed.
{
    A and m < len(items)
}
    cc := items[m][0]
    reservation_index := items[m][1]
    reservation := Reservation.parse(reservation_index)
    day, time, room := reservation.Day, reservation.Time, reservation.Room
    dur := cc.Duration
    ro := Criteria.isRoomOverlapped(slots, reservation, dur)
    criteria[ci + 0] := !ro
    r := getRoomById(room)
    criteria[ci + 1] := Criteria.isSeatEnough(r, cc)
    criteria[ci + 2] := Criteria.isComputerEnough(r, cc)
    timeId := day * daySize + time
    po := Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[0]
    go := Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[1]
    criteria[ci + 3] := ! po
    criteria[ci + 4] := ! go
    i := 0
{
    score = sum(
        1 if criteria[ci + j] = True else Criteria.weights[j]
        for j in range(len(self._objectives))
    )
    and
    0 <= i <= len(self._objectives)
    and
    self._objectives[j] = sum(
       1 if criteria[ci + j] = False and Criteria.weights[j] > 0 else
       2 if criteria[ci + j] = False and Criteria.weights[j] <= 0 else 0
       for j in range(len(self._objectives))
    )
}

(4) is also satisfied since score is at max len(criteria) if all criteria is True, else m is going to be bigger than len(items).
Meaning that within then ClassCourses we have score is less than len(criteria), or if it is equal to it, then all criteria is True -> 
(
    r= Criteria.isSeatEnough(r, cc)
    and Criteria.isComputerEnough(r, cc)
    and not Criteria.isRoomOverlapped(slots, reservation, dur)
    and not Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[0]
    and not Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[1]
) is true for all r, cc

(
    score = len(criteria) and for all cc, reservation_index in self._classes.items(), r= Criteria.isSeatEnough(r, cc)
    and Criteria.isComputerEnough(r, cc)
    and not Criteria.isRoomOverlapped(slots, reservation, dur)
    and not Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[0]
    and not Criteria.isOverlappedProfStudentGrp(slots, cc, numberOfRooms, timeId)[1]
)
or (score < len(criteria)) ->
A and m >= len(items)
[4]
-----------------------------------------------
Now, we need to find C such that these Hoare Triples are valid:

(
    score = sum(
        1 if criteria[ci + j] = True else Criteria.weights[j]
        for j in range(len(self._objectives))
    )
    and
    0 <= i <= len(self._objectives)
    and
    self._objectives[j] = sum(
       1 if criteria[ci + j] = False and Criteria.weights[j] > 0 else
       2 if criteria[ci + j] = False and Criteria.weights[j] <= 0 else 0
       for j in range(len(self._objectives))
    )
    and 
    i >= len(self._objectives)
)
-> C
[1]
-------

{C}
    ci := ci + len(Criteria.weights)
    m = m + 1
{A and m >= len(items)}
[2]
-------

C =
(
    score = sum(
        1 if criteria[ci + j] = True else Criteria.weights[j]
        for j in range(len(self._objectives))
    )
    and
    0 <= i < len(self._objectives)
    and
    self._objectives[j] = sum(
       1 if criteria[ci + j] = False and Criteria.weights[j] > 0 else
       2 if criteria[ci + j] = False and Criteria.weights[j] <= 0 else 0
       for j in range(len(self._objectives))
    )
    and
    i >= len(self._objectives)
)

[1] is outright valid, we just modified the bounds 0 <= i < len(self._objectives)

[2] is valid because precondition is false -> it is vacuously true

{
    score = sum(
        1 if criteria[ci + j] = True else Criteria.weights[j]
        for j in range(len(self._objectives))
    )
    and
    0 <= i < len(self._objectives)
    and
    self._objectives[j] = sum(
       1 if criteria[ci + j] = False and Criteria.weights[j] > 0 else
       2 if criteria[ci + j] = False and Criteria.weights[j] <= 0 else 0
       for j in range(len(self._objectives))
    )
    and
    i >= len(self._objectives)
}
    ci := ci + len(Criteria.weights)
    m = m + 1
{
    criteria, configuration = self._criteria, self._configuration
    and
    items, slots = self._classes.items(), self._slots
    and
    numberOfRooms = configuration.numberOfRooms
    and
    DAY_HOURS, DAYS_NUM = Constant.DAY_HOURS, Constant.DAYS_NUM
    and
    daySize = DAY_HOURS * numberOfRooms
    and
    ci = 0
    and
    getRoomById = configuration.getRoomById
    and
    m = 0
    and
    score = sum(
        1 if criteria[ci + j] = True else Criteria.weights[j]
        for j in range(len(self._objectives))
    ) if len(self._objectives) > 0 else 0
    and
    self._objectives[j] = sum(
       1 if criteria[ci + j] = False and Criteria.weights[j] > 0 else
       2 if criteria[ci + j] = False and Criteria.weights[j] <= 0
       for j in range(len(self._objectives)) if len(self._objectives) > 0 else np.zeros(len(Criteria.weights))
    )
    and m >= len(items)
}
